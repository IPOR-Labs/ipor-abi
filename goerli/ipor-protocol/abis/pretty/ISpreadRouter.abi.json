interface Interface {
    event AdminChanged(address previousAdmin, address newAdmin);
    event BeaconUpgraded(address indexed beacon);
    event CloseSwap(
        uint256 indexed swapId,
        address asset,
        uint256 closeTimestamp,
        address liquidator,
        uint256 transferredToBuyer,
        uint256 transferredToLiquidator
    );
    event SwapUnwind(
        address asset,
        uint256 indexed swapId,
        int256 swapPnlValueToDate,
        int256 swapUnwindAmount,
        uint256 unwindFeeLPAmount,
        uint256 unwindFeeTreasuryAmount
    );
    event Upgraded(address indexed implementation);

    struct CloseSwapRiskIndicatorsInput {
        RiskIndicatorsInputs payFixed;
        RiskIndicatorsInputs receiveFixed;
    }

    struct ClosingSwapDetails {
        uint8 closableStatus;
        bool swapUnwindRequired;
        int256 swapUnwindPnlValue;
        uint256 swapUnwindOpeningFeeAmount;
        uint256 swapUnwindFeeLPAmount;
        uint256 swapUnwindFeeTreasuryAmount;
        int256 pnlValue;
    }

    struct IporSwapClosingResult {
        uint256 swapId;
        bool closed;
    }

    struct RiskIndicatorsInputs {
        uint256 maxCollateralRatio;
        uint256 maxCollateralRatioPerLeg;
        uint256 maxLeveragePerLeg;
        int256 baseSpreadPerLeg;
        uint256 fixedRateCapPerLeg;
        uint256 demandSpreadFactor;
        uint256 expiration;
        bytes signature;
    }

    struct AmmCloseSwapServicePoolConfiguration {
        address asset;
        uint256 decimals;
        address ammStorage;
        address ammTreasury;
        address assetManagement;
        uint256 unwindingFeeRate;
        uint256 unwindingFeeTreasuryPortionRate;
        uint256 maxLengthOfLiquidatedSwapsPerLeg;
        uint256 timeBeforeMaturityAllowedToCloseSwapByCommunity;
        uint256 timeBeforeMaturityAllowedToCloseSwapByBuyer;
        uint256 minLiquidationThresholdToCloseBeforeMaturityByCommunity;
        uint256 minLiquidationThresholdToCloseBeforeMaturityByBuyer;
        uint256 minLeverage;
    }

    struct SpreadInputs {
        address asset;
        uint256 swapNotional;
        uint256 demandSpreadFactor;
        int256 baseSpreadPerLeg;
        uint256 totalCollateralPayFixed;
        uint256 totalCollateralReceiveFixed;
        uint256 liquidityPoolBalance;
        uint256 iporIndexValue;
        uint256 fixedRateCapPerLeg;
    }

    struct TimeWeightedNotionalMemory {
        uint256 timeWeightedNotionalPayFixed;
        uint256 lastUpdateTimePayFixed;
        uint256 timeWeightedNotionalReceiveFixed;
        uint256 lastUpdateTimeReceiveFixed;
        uint8 storageId;
    }

    struct TimeWeightedNotionalResponse {
        TimeWeightedNotionalMemory timeWeightedNotional;
        string key;
    }

    function addPauseGuardians(address[] memory guardians) external;
    function calculateAndUpdateOfferedRatePayFixed28Days(SpreadInputs memory spreadInputs)
        external
        returns (uint256 quoteValue);
    function calculateAndUpdateOfferedRatePayFixed60Days(SpreadInputs memory spreadInputs)
        external
        returns (uint256 quoteValue);
    function calculateAndUpdateOfferedRatePayFixed90Days(SpreadInputs memory spreadInputs)
        external
        returns (uint256 quoteValue);
    function calculateAndUpdateOfferedRateReceiveFixed28Days(SpreadInputs memory spreadInputs)
        external
        returns (uint256 quoteValue);
    function calculateAndUpdateOfferedRateReceiveFixed60Days(SpreadInputs memory spreadInputs)
        external
        returns (uint256 quoteValue);
    function calculateAndUpdateOfferedRateReceiveFixed90Days(SpreadInputs memory spreadInputs)
        external
        returns (uint256 quoteValue);
    function calculateOfferedRatePayFixed28Days(SpreadInputs memory spreadInputs)
        external
        view
        returns (uint256 quoteValue);
    function calculateOfferedRatePayFixed60Days(SpreadInputs memory spreadInputs)
        external
        returns (uint256 quoteValue);
    function calculateOfferedRatePayFixed90Days(SpreadInputs memory spreadInputs)
        external
        returns (uint256 quoteValue);
    function calculateOfferedRateReceiveFixed28Days(SpreadInputs memory spreadInputs)
        external
        view
        returns (uint256 quoteValue);
    function calculateOfferedRateReceiveFixed60Days(SpreadInputs memory spreadInputs)
        external
        returns (uint256 quoteValue);
    function calculateOfferedRateReceiveFixed90Days(SpreadInputs memory spreadInputs)
        external
        returns (uint256 quoteValue);
    function closeSwapsDai(
        address beneficiary,
        uint256[] memory payFixedSwapIds,
        uint256[] memory receiveFixedSwapIds,
        CloseSwapRiskIndicatorsInput memory riskIndicatorsInput
    )
        external
        returns (
            IporSwapClosingResult[] memory closedPayFixedSwaps,
            IporSwapClosingResult[] memory closedReceiveFixedSwaps
        );
    function closeSwapsUsdc(
        address beneficiary,
        uint256[] memory payFixedSwapIds,
        uint256[] memory receiveFixedSwapIds,
        CloseSwapRiskIndicatorsInput memory riskIndicatorsInput
    )
        external
        returns (
            IporSwapClosingResult[] memory closedPayFixedSwaps,
            IporSwapClosingResult[] memory closedReceiveFixedSwaps
        );
    function closeSwapsUsdt(
        address beneficiary,
        uint256[] memory payFixedSwapIds,
        uint256[] memory receiveFixedSwapIds,
        CloseSwapRiskIndicatorsInput memory riskIndicatorsInput
    )
        external
        returns (
            IporSwapClosingResult[] memory closedPayFixedSwaps,
            IporSwapClosingResult[] memory closedReceiveFixedSwaps
        );
    function emergencyCloseSwapsDai(
        uint256[] memory payFixedSwapIds,
        uint256[] memory receiveFixedSwapIds,
        CloseSwapRiskIndicatorsInput memory riskIndicatorsInput
    )
        external
        returns (
            IporSwapClosingResult[] memory closedPayFixedSwaps,
            IporSwapClosingResult[] memory closedReceiveFixedSwaps
        );
    function emergencyCloseSwapsUsdc(
        uint256[] memory payFixedSwapIds,
        uint256[] memory receiveFixedSwapIds,
        CloseSwapRiskIndicatorsInput memory riskIndicatorsInput
    )
        external
        returns (
            IporSwapClosingResult[] memory closedPayFixedSwaps,
            IporSwapClosingResult[] memory closedReceiveFixedSwaps
        );
    function emergencyCloseSwapsUsdt(
        uint256[] memory payFixedSwapIds,
        uint256[] memory receiveFixedSwapIds,
        CloseSwapRiskIndicatorsInput memory riskIndicatorsInput
    )
        external
        returns (
            IporSwapClosingResult[] memory closedPayFixedSwaps,
            IporSwapClosingResult[] memory closedReceiveFixedSwaps
        );
    function getAmmCloseSwapServicePoolConfiguration(address asset)
        external
        view
        returns (AmmCloseSwapServicePoolConfiguration memory);
    function getClosingSwapDetails(
        address asset,
        address account,
        uint8 direction,
        uint256 swapId,
        uint256 closeTimestamp,
        CloseSwapRiskIndicatorsInput memory riskIndicatorsInput
    ) external view returns (ClosingSwapDetails memory closingSwapDetails);
    function getImplementation() external view returns (address);
    function getTimeWeightedNotional()
        external
        returns (TimeWeightedNotionalResponse[] memory timeWeightedNotionalResponse);
    function isPauseGuardian(address account) external view returns (bool);
    function pause() external;
    function proxiableUUID() external view returns (bytes32);
    function removePauseGuardians(address[] memory guardians) external;
    function spreadFunction28DaysConfig() external pure returns (uint256[] memory);
    function spreadFunction60DaysConfig() external pure returns (uint256[] memory);
    function spreadFunction90DaysConfig() external pure returns (uint256[] memory);
    function unpause() external;
}

